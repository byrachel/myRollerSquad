generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin"]
  // engineType = "binary"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  name          String         @unique
  role          Role           @default(USER)
  rgpd          Boolean        @default(false)
  rgpd_ok_at    DateTime?
  avatar        String?
  password      String
  country       String         @default("France")
  county String?
  city          String?
  social_medias Json?
  website       String?
  pictures      String[]
  resume             String?
  roller_dance_level Int     @default(0)
  skatepark_level    Int     @default(0)
  artistic_level     Int     @default(0)
  freestyle_level    Int     @default(0)
  urban_level        Int     @default(0)
  derby_level        Int     @default(0)

  posts         Post[]         @relation("post_author")
  postLiked     PostLiked[]    @relation("post_liked")
  my_squad     User[] @relation("MySquad")
  my_followers User[] @relation("MySquad")
  my_events Event[] @relation("event_author")

  refreshTokens RefreshToken[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      Int
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id         Int      @id @default(autoincrement())
  name       String
  resume     String
  country    String
  county     String
  city       String
  website    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  start_date DateTime
  end_date   DateTime
  styles Style[] @relation("event_roller_styles")
  author    User @relation("event_author", fields: [author_id], references: [id])
  author_id Int
}

model Comment {
  id           Int      @id @default(autoincrement())
  comment      String
  published_at DateTime @default(now())
  author_id    Int
  post         Post     @relation(fields: [post_id], references: [id])
  post_id      Int
  unread Boolean @default(true)
}

model Post {
  id            Int         @id @default(autoincrement())
  title         String
  content       String
  user          User        @relation("post_author", fields: [user_id], references: [id])
  user_id       Int
  created_at    DateTime    @default(now())
  duration      String?
  distance      Decimal?
  distance_unit String?
  hashtags      String[]
  squad_ids     Int[]
  link          String?
  pictures      String[]
  city          String?
  county        String?
  country       String
  comments      Comment[]
  category      Category    @relation("post_category", fields: [category_id], references: [id])
  category_id   Int         @default(1)
  style         Style?      @relation("roller_style", fields: [style_id], references: [id])
  style_id      Int?
  user_likes    PostLiked[] @relation("user_likes")
  price         Int?
}

model PostLiked {
  id         Int      @id @default(autoincrement())
  user       User     @relation("post_liked", fields: [user_id], references: [id])
  user_id    Int
  post       Post     @relation("user_likes", fields: [post_id], references: [id])
  post_id    Int
  created_at DateTime @default(now())

  @@unique([user_id, post_id])
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[] @relation("post_category")
}

model Style {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  posts  Post[]  @relation("roller_style")
  events Event[] @relation("event_roller_styles")
  // pro User[] @relation("pro_styles")
}

// model Place {
//   id            Int       @id @default(autoincrement())
//   name          String
//   resume        String
//   logo          String?
//   pictures      String[]
//   social_medias Json?
//   website       String?
//   address       Json?
//   favorites     User[]    @relation("favorite_places")
//   created_at    DateTime  @default(now())
//   updated_at    DateTime?
//   views         Int       @default(0)
//   type          Type      @relation("place_type", fields: [type_id], references: [id])
//   type_id       Int
//   posts         Post[]    @relation("post_place")
//   owner    User @relation("place_owner", fields: [owner_id], references: [id])
//   owner_id Int
// }

// model Type {
//   id     Int     @id @default(autoincrement())
//   name   String  @unique
//   places Place[] @relation("place_type")
// }

enum Role {
  USER
  PRO
  ADMIN
}
