generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                 Int         @id @default(autoincrement())
  email              String      @unique
  name               String      @unique
  role               Role        @default(USER)
  rgpd               Boolean     @default(false)
  rgpd_ok_at         DateTime?
  avatar             String?
  password           String
  country            String      @default("France")
  county             String?
  city               String?
  social_medias      Json?
  website            String?
  pictures           String[]
  resume             String?
  roller_dance_level Int         @default(0)
  skatepark_level    Int         @default(0)
  artistic_level     Int         @default(0)
  freestyle_level    Int         @default(0)
  urban_level        Int         @default(0)
  derby_level        Int         @default(0)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  active             Boolean     @default(false)
  comments           Comment[]   @relation("comment_author")
  place              Place[]     @relation("place_owner")
  posts              Post[]      @relation("post_author")
  posts_liked        PostLiked[] @relation("post_liked")
  favorite_places    Place[]     @relation("FavoritePlaces")
  User_A             User[]      @relation("MySquad")
  User_B             User[]      @relation("MySquad")
}

model Comment {
  id           Int       @id @default(autoincrement())
  comment      String
  published_at DateTime  @default(now())
  author_id    Int
  post_id      Int
  unread       Boolean   @default(false)
  answer_of_id Int?
  answer_of    Comment?  @relation("answer_of_comment", fields: [answer_of_id], references: [id])
  answers      Comment[] @relation("answer_of_comment")
  author       User      @relation("comment_author", fields: [author_id], references: [id])
  post         Post      @relation(fields: [post_id], references: [id])
}

model Post {
  id            Int             @id @default(autoincrement())
  title         String
  content       String
  user_id       Int
  created_at    DateTime        @default(now())
  duration      String?
  distance      Decimal?
  distance_unit String?
  hashtags      String[]
  squad_ids     Int[]
  link          String?
  pictures      String[]
  city          String?
  county        String?
  country       String
  category_id   Int             @default(1)
  price         Int?
  place_id      Int?
  comments      Comment[]
  category      Category        @relation("post_category", fields: [category_id], references: [id])
  place         Place?          @relation("place_author", fields: [place_id], references: [id])
  user          User            @relation("post_author", fields: [user_id], references: [id])
  user_likes    PostLiked[]     @relation("user_likes")
  style         StylesOnPosts[] @relation("post_style")
}

model PostLiked {
  id         Int      @id @default(autoincrement())
  user_id    Int
  post_id    Int
  created_at DateTime @default(now())
  post       Post     @relation("user_likes", fields: [post_id], references: [id], onDelete: Cascade)
  user       User     @relation("post_liked", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, post_id])
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[] @relation("post_category")
}

model Style {
  id    Int             @id @default(autoincrement())
  name  String          @unique
  posts StylesOnPosts[]
}

model StylesOnPosts {
  post_id    Int
  style_id   Int
  assignedAt DateTime @default(now())
  post       Post     @relation("post_style", fields: [post_id], references: [id], onDelete: Cascade)
  style      Style    @relation(fields: [style_id], references: [id])

  @@id([post_id, style_id])
}

model Place {
  id          Int           @id @default(autoincrement())
  user_id     Int
  logo        String?
  type        PlaceType     @default(PROFESSIONAL)
  category    PlaceCategory @default(OTHER)
  active      Boolean       @default(false)
  name        String
  description String?
  website     String?
  siren       String
  created_at  DateTime      @default(now())
  updated_at  DateTime?
  country     String        @default("France")
  county      String?
  city        String?
  owner       User          @relation("place_owner", fields: [user_id], references: [id], onDelete: Cascade)
  posts       Post[]        @relation("place_author")
  favorites   User[]        @relation("FavoritePlaces")
}

enum Role {
  USER
  PRO
  ADMIN
}

enum PlaceType {
  ASSOCIATION
  PROFESSIONAL
}

enum PlaceCategory {
  LEARN
  BUY
  PLAY
  OTHER
}
